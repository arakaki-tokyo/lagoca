@startuml
skinparam BoxPadding 10
title "start_sequence"
newpage start_sequence 1
actor user as u
participant "event handler" as h
box "<b>Asynchronous\n processing"
control Queue as q
participant API
end box
box <b>Periodic\n processing
participant "timeDoingTask()" as t
participant "timer60s()" as tm
end box

== click start-button then start ==
u -> h: スタートボタンクリック\nhandleStartClick()
activate h
h -> q: add Queue
deactivate h
activate q
note over  q
    envに以下設定
    ---
    * env.isDoing
    * env.doingTask.isSynced = false
    * env.doingTask.start
    * env.doingTask.summary
    * env.doingTask.description
end note
q -> q: toggleTaskStatus()
activate q
q -> t: 経過時間の表示開始

deactivate q
activate t
loop env.isDoing == true
    t -> t
    activate t
end loop
deactivate t
deactivate t

alt LoggedIn case
    q -> q: add API call
    activate q
    q -> API: insertEvent
    deactivate q
    deactivate q
    activate API
    alt fullfilled
        API -> q: resolve
        note right #adf
            タスクの状態
            ---
            ②doing task synced
            (ref. State diagram )
        end note
        activate q
        note over q
            envに以下設定
            ---
            * env.doingTask.isSynced = true
            * env.doingTask.id
        end note
    else rejected
        API -> q: reject
        note right #adf
            タスクの状態
            ---
            ①doing task unsynced
            (ref. State diagram )
        end note

        deactivate API
        ref over tm: start_sequence 2
    end
    note over q
        ローカルストレージに
        **env.doingTask**をセット
    end note
else Not LoggedIn case
    note over q
        ローカルストレージに
        **env.doingTask**をセット
    end note
end
deactivate q

newpage start_sequence 2
== fetch G-cal then start ==
tm -> q: add Queue
activate tm
deactivate tm
activate q
alt env.isDoing == true
    alt env.doingTask.isSynced == true
        ref over q: end_sequence 2
    else env.doingTask.isSynced == false
        q -> q:add API call
        activate q
        q -> API: insertEvent
            note right #adf
                タスクの状態
                ---
                ①doing task unsynced
                (ref. State diagram )
            end note
        deactivate q
        deactivate q
        activate API
        alt fullfilled
            API -> q: resolve
            note right #adf
                タスクの状態
                ---
                ②doing task synced
                (ref. State diagram )
            end note
            activate q
            note over q
                envに以下設定
                ---
                * env.doingTask.isSynced = true
                * env.doingTask.id
            end note
            note over q
                ローカルストレージに
                **env.doingTask**をセット
            end note

        else rejected
            API -> q: reject

        end
        deactivate API
    end
else env.isDoing == false
    q -> q: add API call
    activate q
    q -> API: listEvent
    deactivate q
    deactivate q
    activate API
    alt fullfilled
        API -> q: resolve
        activate q
        alt G-calに実行中のタスクがあり、ローカルでは終了済み(未同期)の場合
            ref over q: end_sequence 2
        else G-calに実行中のタスクがあり、ローカルには保存されていない場合
            note over q
                envに以下設定
                ---
                * env.isDoing = true
                * env.doingTask.isSynced = true
                * env.doingTask.id
                * env.doingTask.start
                * env.doingTask.end
                * env.doingTask.summary
                * env.doingTask.description
            end note

            note over q
                タスク概要と説明を表示
                nodes.inputSummary.value = env.doingTask.summary;
                nodes.inputDescription.value = env.doingTask.description;
            end note

            q -> q: toggleTaskStatus(true)
            activate q
            q -> t: 経過時間の表示開始
            deactivate q
            activate t
            loop env.isDoing == true
                t -> t
                activate t
            end loop
            deactivate t
            deactivate t
            note over q
                ローカルストレージに
                **env.doingTask**をセット
            end note
        end
    else rejected
        API -> q: reject
        deactivate API
        note right #CCC
            * 通信途絶
            * アクセス不可
        end note
        note over q
            handleRejectedCommon()
        end note
    end
    deactivate q
end
newpage start_sequence 3
== read local-strage then start ==
u -> h: ページロード(初期化処理)
activate h
note over h
ローカルストレージから
**doingTask**をゲット
end note
alt doingTask is preserved in localStrage
    note over h
        envに以下設定
        --
        * env.isDoing = true;
        * env.doingTask = JSON.parse(doingTask);
    end note
    note over h
        タスク概要と説明を表示
        nodes.inputSummary.value = env.doingTask.summary;
        nodes.inputDescription.value = env.doingTask.description;
    end note
    h -> h: toggleTaskStatus(true)
    activate h
    h -> t: 経過時間の表示開始
    deactivate h
    activate t
    loop env.isDoing == true
        t -> t
        activate t
    end loop
    deactivate t
    deactivate t
end
deactivate h


    @enduml